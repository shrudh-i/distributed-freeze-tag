"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class sync_request_t(object):
    """ Synchronisation request message """

    __slots__ = ["node_type", "node_id"]

    __typenames__ = ["int8_t", "int32_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.node_type = 0
        """ LCM Type: int8_t """
        self.node_id = 0
        """
        0: GameNode; 1: ItNode; 2: NotItNode
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(sync_request_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bi", self.node_type, self.node_id))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != sync_request_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return sync_request_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = sync_request_t()
        self.node_type, self.node_id = struct.unpack(">bi", buf.read(5))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if sync_request_t in parents: return 0
        tmphash = (0x7e45522ac0b99dca) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if sync_request_t._packed_fingerprint is None:
            sync_request_t._packed_fingerprint = struct.pack(">Q", sync_request_t._get_hash_recursive([]))
        return sync_request_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", sync_request_t._get_packed_fingerprint())[0]

