"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class game_init_t(object):
    """ Game initialization params """

    __slots__ = ["width", "height", "num_not_it"]

    __typenames__ = ["int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.width = 0
        """
        Game board dimensions:
        LCM Type: int32_t
        """

        self.height = 0
        """ LCM Type: int32_t """
        self.num_not_it = 0
        """
        Number of NotIt nodes
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(game_init_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iii", self.width, self.height, self.num_not_it))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != game_init_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return game_init_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = game_init_t()
        self.width, self.height, self.num_not_it = struct.unpack(">iii", buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if game_init_t in parents: return 0
        tmphash = (0x8a76c277f5979e2e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if game_init_t._packed_fingerprint is None:
            game_init_t._packed_fingerprint = struct.pack(">Q", game_init_t._get_hash_recursive([]))
        return game_init_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", game_init_t._get_packed_fingerprint())[0]

